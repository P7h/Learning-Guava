import org.gradle.internal.jvm.Jvm

// For creating metadata files for Eclipse and IntelliJ IDEA.
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8
def PROJECT_TASK_GROUP = "Project specific custom"

repositories {
    mavenCentral()
}

// Dependencies for this project.
// Will be playing with JodaTime, if time permits.
dependencies {
    def guavaVersion = '18.0'
    def jodaTimeVersion = '2.6'
    def junitVersion = '4.12'
    compile group: 'com.google.guava', name: 'guava', version: guavaVersion
    compile group: 'joda-time', name: 'joda-time', version: jodaTimeVersion

    testCompile group: 'junit', name: 'junit', version: junitVersion
}

// For creating the initial skeleton of this project.
task initProject() << {
    if (hasProperty(initPlugins)) {
        initPlugins.split(',').each { plug ->
            project.apply {
                plugin(plug.trim())
            }
        }
    }
    project.sourceSets*.allSource.srcDirTrees.flatten().dir.each { dir ->
        dir.mkdirs()
    }
}

def decorate() {
    for (i in 0..58) {
        print '='
    }
    println ""
}

task versions() {
    group = PROJECT_TASK_GROUP
    description = '*Custom Task*: Prints the JDK and Gradle versions used by this script.'
    decorate()
    println "*** Using Java v${Jvm.current()} ***"
    println "*** Using Gradle v${GradleVersion.current().version} ***"
    decorate()
}

//Infrastructure for testcase related logging.
test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', "skipped", "failed", 'passed'
        // Logging the complete exception stacktrace, if any.
        exceptionFormat 'full'
    }
}

clean.dependsOn versions
compileJava.dependsOn clean

defaultTasks 'clean', 'test'